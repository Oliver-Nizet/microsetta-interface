{% extends "sitebase.jinja2" %}
{% set page_title = survey_schema['groups'][0]['legend'] %}
{% set show_breadcrumbs = True %}
{% block head %}
    <script type="text/javascript" src="/static/vendor/js/vue-2.5.17.min.js"></script>
    <script type="text/javascript">
        // Override the hardecoded " selected" string in vfg.js
        _SELECTED = "{{ _(' selected') }}"
    </script>
    <script type="text/javascript" src="/static/vendor/vue-form-generator-2.3.4/vfg.js"></script>
    <link rel="stylesheet" type="text/css" href="/static/vendor/vue-form-generator-2.3.4/vfg.css">
    <style type="text/css">
        legend {
            display: none;
        }

        img#bristol-chart {
            min-width: 300px;
            max-width: 25%;
        }

        .vue-form-generator .field-radios .radio-list label {
            //padding-right: 25px;
            //display: inline-block;
        }

        .form-group label {
            width: 100%;
        }

        .form-group {
            padding: 5px;
        }

        .field-wrap {
            font-size: 90%;
        }

        /* BEGIN TURNING RADIO BUTTONS INTO BUTTONS

        .radio_style_test {
          margin: 10px;
        }

        .radio_style_test > .field-wrap input[type="radio"] {
          opacity: 0;
          position: fixed;
          width: 0;
        }

        .radio_style_test > .field-wrap label {
            display: inline-block;
            background-color: #ddd;
            padding: 10px 20px;
            font-family: sans-serif, Arial;
            font-size: 16px;
            border: 2px solid #444;
            border-radius: 4px;
        }

        .radio_style_test > .field-wrap label:hover {
          background-color: #dfd;
        }

        .radio_style_test > .field-wrap input[type="radio"]:focus + label {
            border: 2px dashed #444;
        }

        .radio_style_test > .field-wrap  label.is-checked {
            background-color: #bfb;
            border-color: #4c4;
        }

        END TURNING RADIO BUTTONS INTO BUTTONS*/

        .field-wrap.hide {
            position: absolute;
            top: -9999px;
            left: -9999px;
            display: inline-block;
        }



        .tmi-survey-button-blue > .field-wrap > input {
            background: linear-gradient(86.3deg, #00C6D7 -100.33%, #006A96 93.93%) !important;
            border-radius: 50px !important;
            font-weight: 700 !important;
            font-size: 14px !important;
            line-height: 22px !important;
            color: #ffffff !important;
            margin-left: auto !important;
            margin-right: 0px !important;
        }

        .tmi-survey-button-blue > .field-wrap > input:hover {
            color: #e7e7e7 !important;
        }

        .tmi-survey-button-white > .field-wrap > input {
            background: #ffffff !important;
            border-radius: 50px !important;
            font-weight: 700 !important;
            font-size: 14px !important;
            line-height: 22px !important;
            color: var(--tmi-blue) !important;
        }

        .tmi-survey-button-white > .field-wrap > input:hover {
            background-color: #e7e7e7 !important;
        }

        .tmi-survey-button-white-noborder > .field-wrap > input {
            background: #ffffff !important;
            border-radius: 50px !important;
            border: 0px !important;
            font-weight: 700 !important;
            font-size: 14px !important;
            line-height: 22px !important;
            color: var(--tmi-blue) !important;
        }

        .tmi-survey-centered > .field-wrap > input {
            margin-left: auto !important;
        }

        @media (max-width: 575.98px) {
            .tmi-survey-centered {
                display: none;
            }
        }
    </style>
    <script>
        // Overwrite and localize the messages used, based on the example from:
        // https://github.com/vue-generators/vue-form-generator/issues/15#issuecomment-231033466
        VueFormGenerator.validators.resources.invalidInteger = "{{ _('The value is not an integer') }}";
        VueFormGenerator.validators.resources.invalidNumber = "{{ _('Invalid number') }}";

        var result_txt = "";
        var error_txt = "";
        var form_submitted = 0;

        function postSurvey(target) {
            $.ajax({
                type: "POST",
                url: "{{ endpoint }}/accounts/{{ account_id }}/sources/{{ source_id }}/take_survey?survey_template_id={{ survey_template_id }}&target=" + target,
                data: JSON.stringify(survey_model),
                success: function (data, textStatus, jqXHR) {
                    result_txt = data;
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    error_txt = jqXHR.responseText;
                },
                complete: function (data, textStatus, output_obj) {
                    // Replace the html on this page with the html successfully received from the ajax call.
                    // Note that the html we successfully received MAY be an html page reporting an error
                    // captured in the back end :)
                    if (result_txt !== ""){
                        if(result_txt.substring(0,1) == "/") {
                            window.location.replace(result_txt);
                        } else {
                            document.open();
                            document.write(result_txt);
                            document.close();
                        }
                    } else {
                        // I can't imagine how we could get here, but just in case, at least the
                        // user sees *something* ...
                        if (error_txt === ""){
                            error_txt = textStatus;
                        }
                        let queryParam = encodeURIComponent(error_txt);
                        // Get customized error page that will show whatever error message we captured
                        // here in the front end
                        window.location.replace("{{ endpoint }}/error?error_msg=" + queryParam);
                    }
                },
                dataType: "html",
                contentType: "application/json"
            });

            // always return false, preventing a traditional post of the form
            return false;
        }

        function set_triggers(model, field) {
            if ('triggered_by' in field && field.triggered_by !== null && field.triggered_by.length > 0) {
                field.visible = function() {
                    let visible = false;
                    for (let entry of field.triggered_by) {
                        visible |= (model[entry['q_id']] === entry['response']);
                    }
                    // If a triggered question is switched from visible to hidden, we're going to remove the answer from the model
                    if(visible == false) {
                        delete model[field.inputName];
                    }
                    return visible;
                }
            }
        }
    </script>
{% endblock %}
{% block breadcrumb %}
    <li class="breadcrumb-item"><a href="/accounts/{{account_id}}">{{ _('Dashboard') }}</a></li>
    <li class="breadcrumb-item"><a href="/accounts/{{account_id}}/sources/{{source_id}}">{{ _('My Profile') }}</a></li>
    <li class="breadcrumb-item active" aria-current="page">{{ survey_schema['groups'][0]['legend'] }}</li>
{% endblock %}
{% block content %}
    <div class="container default-container">
        <div class="row align-items-center mb-4">
            <div class="col-xs-12 col-md-2 survey-header-icon">
                <img src="/static/img/{{ survey_icon}}" />
            </div>
            <div class="col-xs-12 col-md-10">
                <h1 class="h1-survey">{{ survey_schema['groups'][0]['legend'] }}</h1>
                <span class="survey-subheader">{{ survey_est_minutes }} {{ _('minutes') }} - {{ survey_question_count }} {{ _('questions') }}</span>
            </div>
        </div>
    </div>
    <div class="container default-container">
        <form id="survey_form" name="survey_form">
            <vue-form-generator :schema="schema" :model="model" :options="formOptions" @validated="onValidated"></vue-form-generator>
        </form>
    </div>
    <div class="container default-container">
        <div class="row">
            <div class="col-6">
                {% if previous_survey != None %}
                <img src="/static/img/{{ previous_survey['icon'] }}" width="40" height="40" style="float: left;">
                <div class="survey-nav-name">{{ previous_survey['survey_name'] |e }}</div>
                <div class="small-text survey-info">{{ previous_survey['est_minutes'] |e }} min</div>
                {% endif %}
            </div>
            <div class="col-6 text-end">
                {% if next_survey == None %}
                <span class="small-text survey-info">{{ _('You\'ve finished building your profile!') }}</span>
                {% else %}
                <img src="/static/img/{{ next_survey['icon'] }}" width="40" height="40" style="float: right;">
                <div class="survey-nav-name">{{ next_survey['survey_name'] |e }}</div>
                <div class="small-text survey-info">{{ next_survey['est_minutes'] |e }} min</div>
                {% endif %}
            </div>
        </div>
    </div>
    <script type="text/javascript">
        var survey_model = {};
        var survey_schema= {{survey_schema|tojson}};
        var initial_values = {};

        if (survey_schema.fields !== null) {
            for (let field of survey_schema.fields) {
                if('default' in field && field.default !== null && field.default.length > 0) {
                    if(field.inputName == "108" || field.inputName == "113") {
                        survey_model[field.inputName] = parseInt(field.default);
                    } else {
                        survey_model[field.inputName] = field.default;
                    }
                }
                set_triggers(survey_model, field);
            }
        }
        for (let group of survey_schema.groups) {
            for (let field of group.fields) {
                if('default' in field && field.default !== null && field.default.length > 0) {
                    if(field.inputName == "108" || field.inputName == "113") {
                        survey_model[field.inputName] = parseInt(field.default);
                        initial_values[field.inputName] = parseInt(field.default);
                    } else {
                        survey_model[field.inputName] = field.default;
                        initial_values[field.inputName] = field.default;
                    }
                }
                set_triggers(survey_model, field);
            }
        }

        last_group = survey_schema.groups[survey_schema.groups.length-1];
        {% if previous_survey == None %}
            last_group.fields.push(
            {
                buttonText: "{{ _('Save & Go Home') }}",
                styleClasses: "tmi-survey-button-white-noborder tmi-survey-centered col-6 col-md-10",
                type: "submit",
                validateBeforeSubmit: true,
                onSubmit: function(){
                    $("input").prop('disabled', true);
                    return postSurvey("home");
                }
            },{
                buttonText: "{{ _('Save & Next') }}",
                styleClasses: "tmi-survey-button-blue col-6 col-md-2",
                type: "submit",
                validateBeforeSubmit: true,
                onSubmit: function(){
                    $("input").prop('disabled', true);
                    return postSurvey({{ next_survey['survey_template_id'] }});
                }
            });
        {% elif next_survey == None %}
            last_group.fields.push(
            {
                buttonText: "{{ _('Save & Previous') }}",
                styleClasses: "tmi-survey-button-white col-6 col-md-2",
                type: "submit",
                validateBeforeSubmit: true,
                onSubmit: function(){
                    $("input").prop('disabled', true);
                    return postSurvey({{ previous_survey['survey_template_id'] }});
                }
            },
            {
                buttonText: "{{ _('Save & Go Home') }}",
                styleClasses: "tmi-survey-button-white-noborder tmi-survey-centered col-md-8",
                type: "submit",
                validateBeforeSubmit: true,
                onSubmit: function(){
                    $("input").prop('disabled', true);
                    return postSurvey("home");
                }
            },{
                buttonText: "{{ _('Save & Finish') }}",
                styleClasses: "tmi-survey-button-blue col-6 col-md-2",
                type: "submit",
                validateBeforeSubmit: true,
                onSubmit: function(){
                    $("input").prop('disabled', true);
                    return postSurvey("home");
                }
            });
        {% else %}
            last_group.fields.push(
            {
                buttonText: "{{ _('Save & Previous') }}",
                styleClasses: "tmi-survey-button-white col-6 col-md-2",
                type: "submit",
                validateBeforeSubmit: true,
                onSubmit: function(){
                    $("input").prop('disabled', true);
                    return postSurvey({{ previous_survey['survey_template_id'] }});
                }
            },
            {
                buttonText: "{{ _('Save & Go Home') }}",
                styleClasses: "tmi-survey-button-white-noborder tmi-survey-centered col-md-8",
                type: "submit",
                validateBeforeSubmit: true,
                onSubmit: function(){
                    $("input").prop('disabled', true);
                    return postSurvey("home");
                }
            },{
                buttonText: "{{ _('Save & Next') }}",
                styleClasses: "tmi-survey-button-blue col-6 col-md-2",
                type: "submit",
                validateBeforeSubmit: true,
                onSubmit: function(){
                    $("input").prop('disabled', true);
                    return postSurvey({{ next_survey['survey_template_id'] }});
                }
            });
        {% endif %}

        var errors_on_page = 0;

        function onValidated(isValid,errors) {
            if(isValid === false) {
                errors_on_page = 1;
            } else {
                errors_on_page = 0;
            }
        }

    function hideById(qid) {
        const elements = document.querySelectorAll('[for="' + qid + '"]');
        skipQuestion(elements[0], "initial");
    }

    $(document).ready(function(e) {
        for(const fieldId in initial_values) {
            if(((fieldId == '108' || fieldId == '113') && initial_values[fieldId] == "0") || initial_values[fieldId] == "Unspecified") {
                hideById(fieldId);
            }
        }

        // Select the node that will be observed for mutations
        const targetNode = document.getElementById('app');

        // Options for the observer (which mutations to observe)
        const config = { attributes: true, childList: true, subtree: true, characterData: true };

        // Callback function to execute when mutations are observed
        const callback = (mutationList, observer) => {
          for (const mutation of mutationList) {
            if (mutation.type === 'childList') {
              addSkipLinks();
            }
          }
        };

        // Create an observer instance linked to the callback function
        const observer = new MutationObserver(callback);

        // Start observing the target node for configured mutations
        observer.observe(document.body, config);
    });
    </script>
    <script type="text/javascript" src="/static/vue_survey_form.js"></script>
{% endblock %}

